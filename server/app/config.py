import os
from datetime import timedelta
from dotenv import load_dotenv

# Загрузка переменных окружения из файла .env
load_dotenv()

# =============================================================================
# НАСТРОЙКИ БАЗЫ ДАННЫХ
# =============================================================================

DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///./iot_server.db")
"""
URL для подключения к базе данных:
- По умолчанию: SQLite база в файле iot_server.db
- Для продакшена: postgresql://user:password@localhost/dbname
"""

# =============================================================================
# НАСТРОЙКИ JWT АУТЕНТИФИКАЦИИ
# =============================================================================

JWT_SECRET = os.getenv("JWT_SECRET", "supersecretchangeit")
"""
Секретный ключ для подписи JWT токенов:
- ВНИМАНИЕ: В продакшене обязательно заменить на сложный случайный ключ
- Минимальная длина: 32 символа
"""

JWT_ALGORITHM = os.getenv("JWT_ALGORITHM", "HS256")
"""
Алгоритм подписи JWT токенов:
- HS256: HMAC с SHA-256 (рекомендуется)
- RS256: RSA с SHA-256 (для распределенных систем)
"""

ACCESS_TOKEN_EXPIRE_MINUTES = int(os.getenv("ACCESS_TOKEN_EXPIRE_MINUTES", "60"))
"""
Время жизни access токена в минутах:
- 60 минут: баланс между безопасностью и удобством
- Для продакшена можно уменьшить до 15-30 минут
"""

# =============================================================================
# НАСТРОЙКИ MQTT БРОКЕРА
# =============================================================================

MQTT_BROKER = os.getenv("MQTT_BROKER", "broker.hivemq.com")
"""
Адрес MQTT брокера:
- По умолчанию: публичный брокер HiveMQ (только для разработки)
- Для продакшена: использовать собственный брокер с аутентификацией
"""

MQTT_PORT = int(os.getenv("MQTT_PORT", "1883"))
"""
Порт MQTT брокера:
- 1883: стандартный порт MQTT (без шифрования)
- 8883: порт для MQTT over SSL/TLS
"""

MQTT_BASE_TOPIC = os.getenv("MQTT_BASE_TOPIC", "smart_home/demo")
"""
Базовый префикс для всех MQTT топиков:
- Формат: project/environment/...
- Используется для изоляции разных сред (dev/stage/prod)
"""

# =============================================================================
# НАСТРОЙКИ ВЕБ-СЕРВЕРА
# =============================================================================

HOST = os.getenv("HOST", "0.0.0.0")
"""
Хост для запуска веб-сервера:
- 0.0.0.0: доступ с любых интерфейсов (для Docker)
- 127.0.0.1: только локальный доступ
"""

PORT = int(os.getenv("PORT", "8000"))
"""
Порт для запуска веб-сервера:
- 8000: стандартный порт для разработки
- 80: HTTP порт (требует прав администратора)
- 443: HTTPS порт (требует прав администратора)
"""

# =============================================================================
# НАСТРОЙКИ ЛОГИРОВАНИЯ
# =============================================================================

LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")
"""
Уровень детализации логов:
- DEBUG: максимальная детализация (для разработки)
- INFO: основная информация о работе
- WARNING: только предупреждения и ошибки
- ERROR: только ошибки
"""

# =============================================================================
# НАСТРОЙКИ PUSH-УВЕДОМЛЕНИЙ (FIREBASE CLOUD MESSAGING)
# =============================================================================

FCM_SERVER_KEY = os.getenv("FCM_SERVER_KEY", "YOUR_FIREBASE_SERVER_KEY_HERE")
"""
Серверный ключ для Firebase Cloud Messaging:
- Получить в консоли Firebase: Project Settings → Cloud Messaging
- Формат: "AAAA..."
- Без этого ключа push-уведомления отправляться не будут
"""