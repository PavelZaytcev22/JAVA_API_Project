import paho.mqtt.client as mqtt
from paho.mqtt.enums import CallbackAPIVersion
import logging
import ssl
from .config import MQTT_BROKER, MQTT_PORT, MQTT_BASE_TOPIC, MQTT_USERNAME, MQTT_PASSWORD
from .database import SessionLocal
from .crud import get_device, update_device_state, add_sensor_history
from .automation_service import notify_mqtt_event  # –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger("mqtt")

# –°–æ–∑–¥–∞–Ω–∏–µ MQTT –∫–ª–∏–µ–Ω—Ç–∞
MQTT_CLIENT = mqtt.Client(
    client_id="smart_home_server", 
    callback_api_version=CallbackAPIVersion.VERSION2
)


def on_connect(client, userdata, flags, rc, properties=None):
    """
    Callback –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ MQTT –±—Ä–æ–∫–µ—Ä—É
    """
    logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MQTT –±—Ä–æ–∫–µ—Ä—É. –ö–æ–¥: %s", rc)
    
    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Å–µ —Ç–æ–ø–∏–∫–∏ –≤ —Ä–∞–º–∫–∞—Ö –±–∞–∑–æ–≤–æ–≥–æ –ø—É—Ç–∏
    topic = f"{MQTT_BASE_TOPIC}/#"
    client.subscribe(topic)
    logger.info("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫: %s", topic)


def on_message(client, userdata, msg):
    """
    Callback –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ MQTT
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
    """
    try:
        topic = msg.topic
        payload = msg.payload.decode()
        logger.info("–ü–æ–ª—É—á–µ–Ω–æ MQTT —Å–æ–æ–±—â–µ–Ω–∏–µ: %s -> %s", topic, payload)
        
        # –ü–∞—Ä—Å–∏–º —Ç–æ–ø–∏–∫ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è device_id
        # –§–æ—Ä–º–∞—Ç —Ç–æ–ø–∏–∫–∞: base_topic/device/{device_id}/state
        parts = topic.split("/")
        
        # –ò—â–µ–º —á–∞—Å—Ç—å 'device' –≤ –ø—É—Ç–∏ —Ç–æ–ø–∏–∫–∞
        if "device" in parts:
            device_idx = parts.index("device")
            try:
                # –°–ª–µ–¥—É—é—â–∞—è —á–∞—Å—Ç—å –ø–æ—Å–ª–µ 'device' - —ç—Ç–æ ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                device_id = int(parts[device_idx + 1])
            except (ValueError, IndexError):
                logger.debug("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π device_id –≤ —Ç–æ–ø–∏–∫–µ: %s", topic)
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            _update_device_in_database(device_id, payload)
            
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ MQTT —Å–æ–æ–±—â–µ–Ω–∏—è")


def _update_device_in_database(device_id: int, payload: str):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
    """
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        device = get_device(db, device_id)
        if not device:
            logger.warning("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π device_id: %s", device_id)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–∞—Ç—á–∏–∫–∞
        add_sensor_history(db, device_id, payload)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        update_device_state(db, device, payload)
        logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ %s -> %s", device_id, payload)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ–º
        notify_mqtt_event(db, device_id, payload)
        
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –ë–î")
    finally:
        # –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        db.close()


def start_mqtt():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç MQTT –∫–ª–∏–µ–Ω—Ç —Å TLS –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ callback —Ñ—É–Ω–∫—Ü–∏–π
        MQTT_CLIENT.on_connect = on_connect
        MQTT_CLIENT.on_message = on_message
        
        # üîê –ù–ê–°–¢–†–û–ô–ö–ê TLS
        MQTT_CLIENT.tls_set(
            ca_certs=None,
            certfile=None,
            keyfile=None,
            cert_reqs=ssl.CERT_REQUIRED,
            tls_version=ssl.PROTOCOL_TLS,
            ciphers=None
        )
        
        # üîê –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏–º–µ–Ω–∏ —Ö–æ—Å—Ç–∞ (–º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ–±–ª–∞—á–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤)
        MQTT_CLIENT.tls_insecure_set(False)  # True —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!
        
        # üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        MQTT_CLIENT.username_pw_set(MQTT_USERNAME, MQTT_PASSWORD)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ EMQX Cloud —Å TLS
        MQTT_CLIENT.connect(MQTT_BROKER, MQTT_PORT, keepalive=60)
        
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
        MQTT_CLIENT.loop_start()
        logger.info("üöÄ MQTT –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω —Å TLS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ EMQX Cloud")
        
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ MQTT –∫–ª–∏–µ–Ω—Ç–∞: {e}")


def publish_device_state(device_id: int, state: str):
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ MQTT
    
    Args:
        device_id: ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        state: –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (ON/OFF –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    """
    topic = f"{MQTT_BASE_TOPIC}/device/{device_id}/cmd"
    
    try:
        MQTT_CLIENT.publish(topic, state)
        logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: %s -> %s", topic, state)
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É %s", device_id)