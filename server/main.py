import sys
import os
import datetime
import logging
from logging.handlers import RotatingFileHandler
import random
from flask import Flask, jsonify, request
from flask_cors import CORS

# =============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
# =============================================================================

def setup_logging():
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ë–ï–ó –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç request context
    """
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists('logs'):
        os.makedirs('logs')
    
    # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤ –ë–ï–ó IP –∫–ª–∏–µ–Ω—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    formatter = logging.Formatter(
        '%(asctime)s - %(levelname)s - [%(name)s] - %(message)s'
    )
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger('gpio_server')
    logger.setLevel(logging.INFO)
    
    # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
    file_handler = RotatingFileHandler(
        'logs/gpio_server.log',
        maxBytes=10*1024*1024,  # 10MB
        backupCount=5,
        encoding='utf-8'
    )
    file_handler.setFormatter(formatter)
    file_handler.setLevel(logging.INFO)
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    console_handler.setLevel(logging.INFO)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    
    return logger

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –î–û —Å–æ–∑–¥–∞–Ω–∏—è Flask app
logger = setup_logging()

# =============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ê GPIO - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–õ–ê–¢–§–û–†–ú–´
# =============================================================================

try:
    # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π GPIO –¥–ª—è Raspberry Pi
    import RPi.GPIO as GPIO
    IS_RASPBERRY_PI = True
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ù–∞—Å—Ç–æ—è—â–∏–π Raspberry Pi - –∏—Å–ø–æ–ª—å–∑—É–µ–º RPi.GPIO")
    
except (ImportError, RuntimeError) as e:
    # –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ –ü–ö - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
    import fake_rpi
    fake_rpi.toggle_print(False)  # –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –≤—ã–≤–æ–¥—ã
        
    # –ü–æ–¥–º–µ–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–æ–¥–∞
    sys.modules['RPi'] = fake_rpi.RPi
    sys.modules['RPi.GPIO'] = fake_rpi.RPi.GPIO
    import RPi.GPIO as GPIO
        
    IS_RASPBERRY_PI = False
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º fake-rpi")
    
        
    GPIO = MockGPIO
    IS_RASPBERRY_PI = False

# =============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ê FLASK –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø –° –£–ß–ï–¢–û–ú ANDROID –ö–õ–ò–ï–ù–¢–ê
# =============================================================================

app = Flask(__name__)

# üîß –í–ê–ñ–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
CORS(app, resources={
    r"/api/*": {
        "origins": ["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        "methods": ["GET", "POST", "PUT", "DELETE"],
        "allow_headers": ["Content-Type", "Authorization"]
    }
})

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
app.config['JSON_SORT_KEYS'] = False
app.config['JSONIFY_PRETTYPRINT_REGULAR'] = True

# =============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø GPIO –ü–ò–ù–û–í
# =============================================================================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–∞ –∏ –ø–∏–Ω–æ–≤
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)

# üîß –ù–æ–º–µ—Ä–∞ –ø–∏–Ω–æ–≤ (BCM –Ω—É–º–µ—Ä–∞—Ü–∏—è)
LED_PIN = 17          # –ü–∏–Ω –¥–ª—è —Å–≤–µ—Ç–æ–¥–∏–æ–¥–∞
BUTTON_PIN = 18       # –ü–∏–Ω –¥–ª—è –∫–Ω–æ–ø–∫–∏  
TEMPERATURE_SENSOR_PIN = 27  # –ü–∏–Ω –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
HUMIDITY_SENSOR_PIN = 22     # –ü–∏–Ω –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∏–Ω–æ–≤
GPIO.setup(LED_PIN, GPIO.OUT)
GPIO.setup(BUTTON_PIN, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(TEMPERATURE_SENSOR_PIN, GPIO.IN)
GPIO.setup(HUMIDITY_SENSOR_PIN, GPIO.IN)

logger.info(f"GPIO –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ —Ä–µ–∂–∏–º–µ: {'Raspberry Pi' if IS_RASPBERRY_PI else '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞'}")

# =============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
# =============================================================================

def log_android_request():
    """–õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –æ—Ç Android –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å IP –∞–¥—Ä–µ—Å–æ–º"""
    client_ip = request.remote_addr
    user_agent = request.headers.get('User-Agent', 'Unknown')
    
    logger.info(f"Android –∑–∞–ø—Ä–æ—Å: {request.method} {request.path} - IP: {client_ip} - User-Agent: {user_agent}")

def log_with_ip(message, level='info'):
    """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å IP –∞–¥—Ä–µ—Å–æ–º –∫–ª–∏–µ–Ω—Ç–∞"""
    client_ip = getattr(request, 'remote_addr', 'unknown')
    log_message = f"{message} - IP: {client_ip}"
    
    if level == 'info':
        logger.info(log_message)
    elif level == 'warning':
        logger.warning(log_message)
    elif level == 'error':
        logger.error(log_message)

# =============================================================================
# MIDDLEWARE –î–õ–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –ó–ê–ü–†–û–°–û–í –û–¢ ANDROID
# =============================================================================

@app.before_request
def before_request():
    """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ API –∑–∞–ø—Ä–æ—Å—ã"""
    if request.path.startswith('/api/'):
        log_android_request()

# =============================================================================
# API ENDPOINTS –î–õ–Ø ANDROID –ö–õ–ò–ï–ù–¢–ê
# =============================================================================

@app.route('/')
def home():
    """
    –ö–æ—Ä–Ω–µ–≤–æ–π endpoint - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
    """
    log_with_ip("–ó–∞–ø—Ä–æ—Å –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É endpoint")
    return jsonify({
        "status": "success",
        "message": "üöÄ Flask GPIO Server —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        "service": "Raspberry Pi GPIO Control API",
        "version": "2.1",
        "platform": "raspberry_pi" if IS_RASPBERRY_PI else "development",
        "timestamp": datetime.datetime.utcnow().isoformat() + 'Z',
        "endpoints": {
            "health_check": "/health",
            "led_control": "/api/led/<state>",
            "button_status": "/api/button", 
            "sensor_data": "/api/sensors",
            "system_info": "/api/system"
        },
        "android_support": True,
        "cors_enabled": True
    })

@app.route('/health')
def health_check():
    """
    Health-check endpoint –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    """
    logger.info("Health check –∑–∞–ø—Ä–æ—Å")
    try:
        health_data = {
            "status": "healthy",
            "service": "gpio-control-server",
            "timestamp": datetime.datetime.utcnow().isoformat() + 'Z',
            "uptime": get_uptime(),
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
            "system": {
                "platform": "raspberry_pi" if IS_RASPBERRY_PI else "development",
                "python_version": sys.version.split()[0],
                "gpio_available": True,
            },
            
            # –°—Ç–∞—Ç—É—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            "components": {
                "led": "operational",
                "button": "operational", 
                "sensors": "operational",
                "api": "operational"
            },
            
            # –î–ª—è Android –∫–ª–∏–µ–Ω—Ç–∞
            "mobile_support": {
                "android_compatible": True,
                "recommended_check_interval": 30  # —Å–µ–∫—É–Ω–¥—ã
            }
        }
        
        return jsonify(health_data), 200
        
    except Exception as e:
        logger.error(f"Health check –æ—à–∏–±–∫–∞: {str(e)}")
        return jsonify({
            "status": "unhealthy",
            "error": str(e),
            "timestamp": datetime.datetime.utcnow().isoformat() + 'Z'
        }), 500

@app.route('/api/led/<state>', methods=['POST', 'GET'])
def control_led(state):
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–º - –æ—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è Android –∫–ª–∏–µ–Ω—Ç–∞
    """
    try:
        log_with_ip(f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ LED: –∑–∞–ø—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è '{state}'")
        
        if state == 'on':
            GPIO.output(LED_PIN, GPIO.HIGH)
            response_data = {
                "status": "success",
                "action": "led_on",
                "message": "üí° –°–≤–µ—Ç–æ–¥–∏–æ–¥ –≤–∫–ª—é—á–µ–Ω",
                "led_state": "ON",
                "timestamp": datetime.datetime.utcnow().isoformat() + 'Z'
            }
            log_with_ip("–°–≤–µ—Ç–æ–¥–∏–æ–¥ –≤–∫–ª—é—á–µ–Ω")
            
        elif state == 'off':
            GPIO.output(LED_PIN, GPIO.LOW)
            response_data = {
                "status": "success", 
                "action": "led_off",
                "message": "üîå –°–≤–µ—Ç–æ–¥–∏–æ–¥ –≤—ã–∫–ª—é—á–µ–Ω",
                "led_state": "OFF",
                "timestamp": datetime.datetime.utcnow().isoformat() + 'Z'
            }
            log_with_ip("–°–≤–µ—Ç–æ–¥–∏–æ–¥ –≤—ã–∫–ª—é—á–µ–Ω")
            
        elif state == 'status':
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–≤–µ—Ç–æ–¥–∏–æ–¥–∞
            current_state = "ON" if GPIO.input(LED_PIN) == GPIO.HIGH else "OFF"
            response_data = {
                "status": "success",
                "action": "led_status",
                "led_state": current_state,
                "timestamp": datetime.datetime.utcnow().isoformat() + 'Z'
            }
            log_with_ip(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è LED: {current_state}")
            
        else:
            log_with_ip(f"–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ LED: {state}", 'warning')
            return jsonify({
                "status": "error",
                "error_code": "INVALID_STATE",
                "message": "–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 'on', 'off' –∏–ª–∏ 'status'"
            }), 400
        
        return jsonify(response_data)
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–º: {str(e)}"
        log_with_ip(error_msg, 'error')
        return jsonify({
            "status": "error",
            "error_code": "GPIO_ERROR", 
            "message": error_msg
        }), 500

@app.route('/api/button', methods=['GET'])
def read_button():
    """
    –ß—Ç–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏
    """
    try:
        button_state = GPIO.input(BUTTON_PIN)
        is_pressed = (button_state == GPIO.LOW)
        
        response_data = {
            "status": "success",
            "button_pressed": is_pressed,
            "button_state": "pressed" if is_pressed else "released",
            "timestamp": datetime.datetime.utcnow().isoformat() + 'Z'
        }
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –ª–æ–≥–∏
        if is_pressed:
            log_with_ip("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞")
        
        return jsonify(response_data)
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏: {str(e)}"
        log_with_ip(error_msg, 'error')
        return jsonify({
            "status": "error",
            "error_code": "BUTTON_READ_ERROR",
            "message": error_msg
        }), 500

@app.route('/api/sensors', methods=['GET'])
def read_sensors():
    """
    –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ –≤—Å–µ—Ö —Å–µ–Ω—Å–æ—Ä–æ–≤
    """
    try:
        # –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        if not IS_RASPBERRY_PI:
            temperature = round(20 + random.random() * 15, 1)  # 20-35¬∞C
            humidity = round(30 + random.random() * 50, 1)     # 30-80%
            light_level = random.randint(0, 1023)
        else:
            # –ù–∞ —Ä–µ–∞–ª—å–Ω–æ–º Pi –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è —á—Ç–µ–Ω–∏—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö –¥–∞—Ç—á–∏–∫–æ–≤
            temperature = 25.0
            humidity = 65.0
            light_level = 512
        
        sensor_data = {
            "status": "success",
            "timestamp": datetime.datetime.utcnow().isoformat() + 'Z',
            "sensors": {
                "temperature": {
                    "value": temperature,
                    "unit": "¬∞C",
                    "sensor_type": "digital"
                },
                "humidity": {
                    "value": humidity, 
                    "unit": "%",
                    "sensor_type": "digital"
                },
                "light_level": {
                    "value": light_level,
                    "unit": "lux",
                    "sensor_type": "analog"
                }
            },
            "readings_count": 3
        }
        
        log_with_ip(f"–î–∞–Ω–Ω—ã–µ —Å–µ–Ω—Å–æ—Ä–æ–≤: {temperature}¬∞C, {humidity}%")
        return jsonify(sensor_data)
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–µ–Ω—Å–æ—Ä–æ–≤: {str(e)}"
        log_with_ip(error_msg, 'error')
        return jsonify({
            "status": "error",
            "error_code": "SENSOR_READ_ERROR",
            "message": error_msg
        }), 500

@app.route('/api/system', methods=['GET'])
def system_info():
    """
    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –¥–ª—è Android –∫–ª–∏–µ–Ω—Ç–∞
    """
    log_with_ip("–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ")
    system_info = {
        "status": "success",
        "server_info": {
            "name": "Raspberry Pi GPIO Server",
            "version": "2.1",
            "platform": "raspberry_pi" if IS_RASPBERRY_PI else "development",
            "uptime": get_uptime()
        },
        "gpio_configuration": {
            "led_pin": LED_PIN,
            "button_pin": BUTTON_PIN,
            "temperature_sensor_pin": TEMPERATURE_SENSOR_PIN,
            "humidity_sensor_pin": HUMIDITY_SENSOR_PIN,
            "pin_mode": "BCM"
        },
        "api_status": {
            "total_endpoints": 5,
            "android_support": True,
            "cors_enabled": True
        }
    }
    
    return jsonify(system_info)

# =============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–®–ò–ë–û–ö –î–õ–Ø ANDROID –ö–õ–ò–ï–ù–¢–ê
# =============================================================================

@app.errorhandler(404)
def not_found_error(error):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–æ–∫"""
    log_with_ip(f"404 Not Found: {request.path}", 'warning')
    return jsonify({
        "status": "error",
        "error_code": "ENDPOINT_NOT_FOUND",
        "message": f"Endpoint {request.path} –Ω–µ –Ω–∞–π–¥–µ–Ω",
        "available_endpoints": ["/", "/health", "/api/led/<state>", "/api/button", "/api/sensors", "/api/system"]
    }), 404

@app.errorhandler(500)
def internal_error(error):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ 500 –æ—à–∏–±–æ–∫"""
    log_with_ip(f"500 Internal Server Error: {str(error)}", 'error')
    return jsonify({
        "status": "error", 
        "error_code": "INTERNAL_SERVER_ERROR",
        "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
    }), 500

@app.errorhandler(405)
def method_not_allowed(error):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ 405 –æ—à–∏–±–æ–∫"""
    log_with_ip(f"405 Method Not Allowed: {request.method} {request.path}", 'warning')
    return jsonify({
        "status": "error",
        "error_code": "METHOD_NOT_ALLOWED", 
        "message": f"–ú–µ—Ç–æ–¥ {request.method} –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è {request.path}"
    }), 405

# =============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =============================================================================

def get_uptime():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞"""
    if hasattr(app, 'start_time'):
        uptime = datetime.datetime.utcnow() - app.start_time
        hours, remainder = divmod(uptime.total_seconds(), 3600)
        minutes, seconds = divmod(remainder, 60)
        return f"{int(hours)}h {int(minutes)}m {int(seconds)}s"
    return "unknown"

# =============================================================================
# –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
# =============================================================================

if __name__ == '__main__':
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    try:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è uptime
        app.start_time = datetime.datetime.utcnow()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—É—Å–∫–µ
        print("=" * 60)
        print("üöÄ –ó–ê–ü–£–°–ö FLASK GPIO –°–ï–†–í–ï–†–ê")
        print("=" * 60)
        print(f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {'Raspberry Pi' if IS_RASPBERRY_PI else 'Development PC'}")
        print(f"Python: {sys.version.split()[0]}")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:")
        print("  GET  /              - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ")
        print("  GET  /health        - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
        print("  POST/GET /api/led/<state> - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–º")
        print("  GET  /api/button    - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏") 
        print("  GET  /api/sensors   - –î–∞–Ω–Ω—ã–µ —Å–µ–Ω—Å–æ—Ä–æ–≤")
        print("  GET  /api/system    - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
        print("=" * 60)
        
        print("\nüåü –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        print("üì± –ì–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤!")
        print("üìç URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
        print("   http://localhost:5000/")
        print("   http://[IP-–∞–¥—Ä–µ—Å-–∫–æ–º–ø—å—é—Ç–µ—Ä–∞]:5000/")
        print("\n‚ö° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C\n")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
        logger.info("–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        
        # üîß Production –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        app.run(
            host='0.0.0.0',      # –ü—Ä–∏–Ω–∏–º–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–æ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
            port=5000,           # –ü–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è Flask
            debug=False,         # –í—ã–∫–ª—é—á–∏—Ç—å debug —Ä–µ–∂–∏–º –¥–ª—è production
            threaded=True        # –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        )
        
    except KeyboardInterrupt:
        logger.info("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
        print("\nüëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        
    finally:
        # –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º GPIO –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        GPIO.cleanup()
        logger.info("GPIO –æ—á–∏—â–µ–Ω")
        print("‚úÖ GPIO –æ—á–∏—â–µ–Ω")